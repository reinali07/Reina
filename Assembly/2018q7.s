//adder/subtractor with order of operations using brackets
.global _start
INPUT:
	//.word 0x00000000 //(
	.word 0x00000000 //(
	.word 0x8AB0121B //# 179311131
	.word 0x2FFFFFFF //)
	.word 0x7FFFFFFF //-
	.word 0x00000000 //(
	.word 0x844305FE //# 71501310
	.word 0x7FFFFFFF //-
	.word 0x90000001 //# 268435457
	.word 0x7FFFFFFF //-
	.word 0x00000000 //(
	.word 0x00000000 //(
	.word 0x80000E32 //# 3634
	.word 0x7FFFFFFF //-
	.word 0x00000000 //(
	.word 0x90000110 //# 268435728
	.word 0x2FFFFFFF //)
	.word 0x2FFFFFFF //)
	.word 0x40000000 //+
	.word 0x80034FEA //# 217066
	.word 0x2FFFFFFF //)
	.word 0x40000000 //+
	.word 0x80034FEA //# 217066
	.word 0x2FFFFFFF //)
	.word 0x40000000 //+
	.word 0x80000002 //# 2
	//.word 0x2FFFFFFF //)
	.word 0xFFFFFFFF //((179311131))-(71501310-268435457-((3634-(268435728))+217066)+217066) + 2 = 107813184 = 66D1940
_start:
	LDR R0,=INPUT
	LDR R6,=0xE0000000 //MASK
	LDR R8,=0x1FFFFFFF //MASK
	LDR SP,=0x3FFFFFFC
	MOV R11,#0
	MOV R10,#0
	MOV R5,#1
	BL PROCESS
END: B END
	
PROCESS:
	CMP R5,#1
	PUSHEQ {R5,R10,R11,LR}
	MOVEQ R10,#0 //RESULT
	MOVEQ R11,#0 //OPERATOR
	
	LDR R3,[R0],#4
	AND R2,R3,R6 //R2 GETS TOP 3 BITS
	AND R3,R3,R8 //R3 GETS ALL THE OTHER BITS
	LSR R2,R2,#29
	
	CMP R2,#0 //IF IS LEFT BRACKET
	MOVEQ R5,#1 //SAW A LEFT BRACKET
	BLEQ PROCESS
	
	MOV R5,#0
	CMP R2,#1 //IF IS A RIGHT BRACKET
	CMPNE R2,#0b111 //IF END
	BNE OPS
	MOV R1,R10
	POP {R5,R10,R11}
	MOV R3,R1
	MOV R2,#0b100
	POP {PC}
	
OPS:
	CMP R2,#0b100 //IF IS NOT A NUMBER OR A BRACKET, MUST BE AN OPERATOR
	MOVNE R11,R2
	BNE PROCESS
	
	CMP R11,#0 //IF IS A NUMBER AND NO PREV OPERATOR
	MOVEQ R10,R3
	BEQ PROCESS
	
	CMP R11,#0b010 //IF PREV OPERATOR IS ADD
	ADDEQ R10,R10,R3
	SUBNE R10,R10,R3
	MOV R11,#0
	B PROCESS